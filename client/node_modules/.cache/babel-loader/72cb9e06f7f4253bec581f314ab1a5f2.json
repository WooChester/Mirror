{"ast":null,"code":"var _jsxFileName = \"/Users/chesterwoo/Desktop/sm/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react'; // THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  TOGGLE_MENU: \"TOGGLE_MENU\",\n  TOGGLE_EDIT: \"TOGGLE_EDIT\",\n  TOGGLE_LIGHT: \"TOGGLE_LIGHT\",\n  INIT_APP: \"INIT_APP\",\n  ADD_APP: \"ADD_APP\",\n  REMOVE_APP: \"REMOVE_APP\",\n  HOLD_APP: \"HOLD_APP\",\n  RELEASE_APP: \"RELEASE_APP\",\n  EDIT_APP: \"EDIT_APP\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    active_apps: [],\n    menu_open: false,\n    edit_mode: false,\n    light_mode: false,\n    current_app: null\n  }); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.TOGGLE_MENU:\n        {\n          return setStore({\n            active_apps: store.active_apps,\n            menu_open: !store.menu_open,\n            edit_mode: false,\n            light_mode: store.light_mode,\n            current_app: null\n          });\n        }\n\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"MxHUgkfduxYyBIwKhAoLQJgb4ak=\");\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useState","GlobalStoreContext","GlobalStoreActionType","TOGGLE_MENU","TOGGLE_EDIT","TOGGLE_LIGHT","INIT_APP","ADD_APP","REMOVE_APP","HOLD_APP","RELEASE_APP","EDIT_APP","GlobalStoreContextProvider","props","store","setStore","active_apps","menu_open","edit_mode","light_mode","current_app","storeReducer","action","type","payload","CHANGE_LIST_NAME","idNamePairs","currentList","newListCounter","isListNameEditActive","isItemEditActive","listMarkedForDeletion","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","UPDATE_LIST","SET_LIST_NAME_EDIT_ACTIVE","children"],"sources":["/Users/chesterwoo/Desktop/sm/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\n\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    TOGGLE_MENU: \"TOGGLE_MENU\",\n    TOGGLE_EDIT: \"TOGGLE_EDIT\",\n    TOGGLE_LIGHT: \"TOGGLE_LIGHT\",\n\n    INIT_APP: \"INIT_APP\",\n    ADD_APP: \"ADD_APP\",\n    REMOVE_APP: \"REMOVE_APP\",\n    HOLD_APP: \"HOLD_APP\",\n    RELEASE_APP: \"RELEASE_APP\",\n    EDIT_APP: \"EDIT_APP\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        active_apps: [],\n        menu_open: false,\n        edit_mode: false,\n        light_mode: false,\n        current_app: null\n    });\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.TOGGLE_MENU: {\n                return setStore({\n                    active_apps: store.active_apps,\n                    menu_open: !store.menu_open,\n                    edit_mode: false,\n                    light_mode: store.light_mode,\n                    current_app: null\n                });\n            }\n\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"],"mappings":"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"},"metadata":{},"sourceType":"module"}