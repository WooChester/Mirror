{"ast":null,"code":"var _jsxFileName = \"/Users/chesterwoo/Desktop/sm/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  UPDATE_LIST: \"UPDATE_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        console.log(top5List);\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            response = await api.getTop5ListPairs({\n              \"email\": auth.user.email\n            });\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            } else {\n              console.log(\"Err\");\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      tps.clearAllTransactions();\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    console.log(auth.user.email);\n    const response = await api.getTop5ListPairs({\n      \"email\": auth.user.email\n    });\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    console.log(store.idNamePairs);\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      console.log(top5List);\n      console.log(store.idNamePairs);\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List._id\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  };\n\n  store.changeItemName = async function (index, newValue) {\n    try {\n      let current_list = store.currentList.items;\n      current_list[index] = newValue;\n      console.log(store.currentList._id);\n      let response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        async function getListPairs() {\n          response = await api.getTop5ListPairs({\n            \"email\": auth.user.email\n          });\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.UPDATE_LIST,\n              payload: {\n                idNamePairs: pairsArray\n              }\n            });\n          } else {\n            console.log(\"Err\");\n          }\n        }\n\n        getListPairs();\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"KXcxQER+1E+Fvo7SefurB2VfaDE=\", true);\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","UPDATE_LIST","tps","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","history","useHistory","auth","storeReducer","action","type","payload","isListNameEditActive","isItemEditActive","changeListName","id","newName","response","getTop5ListById","data","success","top5List","name","updateList","console","log","updateTop5ListById","_id","getListPairs","getTop5ListPairs","user","email","pairsArray","closeCurrentList","clearAllTransactions","push","createNewList","newListName","items","ownerEmail","createTop5List","newList","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","changeItemName","index","newValue","current_list","err","setCurrentList","addMoveItemTransaction","start","end","transaction","addTransaction","addUpdateItemTransaction","newText","oldText","moveItem","temp","i","updateCurrentList","updateItem","newItem","undo","undoTransaction","redo","doTransaction","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","setIsListNameEditActive","setIsItemEditActive","children"],"sources":["/Users/chesterwoo/Desktop/sm/src/store/index.js"],"sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    UPDATE_LIST: \"UPDATE_LIST\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            async function updateList(top5List) {\n                console.log(top5List);\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs({\"email\" : auth.user.email});\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                        else{\n                            console.log(\"Err\");\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        console.log(auth.user.email);\n        const response = await api.getTop5ListPairs({\"email\": auth.user.email});\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        console.log(store.idNamePairs);\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            console.log(top5List);\n            console.log(store.idNamePairs);\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List._id\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n\n    store.changeItemName = async function(index, newValue){\n        try{\n            let current_list = store.currentList.items;\n            current_list[index] = newValue;\n            console.log(store.currentList._id);\n            let response = await api.updateTop5ListById(store.currentList._id, store.currentList)\n            if (response.data.success) {\n                async function getListPairs() {\n                    response = await api.getTop5ListPairs({\"email\" : auth.user.email});\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.UPDATE_LIST,\n                            payload: {\n                                idNamePairs: pairsArray\n                            }\n                        });\n                    }\n                    else{\n                        console.log(\"Err\");\n                    }\n                }\n                getListPairs();\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"],"mappings":"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"},"metadata":{},"sourceType":"module"}